[
  {
    "objectID": "notebooks/report.html",
    "href": "notebooks/report.html",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "",
    "text": "[…]"
  },
  {
    "objectID": "notebooks/report.html#imports",
    "href": "notebooks/report.html#imports",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Imports",
    "text": "Imports\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom great_tables import GT\nfrom pandas.plotting import scatter_matrix\n\nfrom src.stylesheet import customize_plots\nfrom src.inspection import make_df, display, display2"
  },
  {
    "objectID": "notebooks/report.html#the-dataset",
    "href": "notebooks/report.html#the-dataset",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "The dataset",
    "text": "The dataset\n\nLoad the data\nWe begin by exploring the data to get to know the features and patterns on which we will base our analysis.\n\n\nCode\nif 'data' not in locals():\n    data = pd.read_csv(\n        \"../data/raw/PBJ_Daily_Nurse_Staffing_Q1_2024.zip\",\n        encoding='ISO-8859-1',\n        low_memory=False\n    )\nelse:\n    print(\"data loaded.\")\n\n\n\n\nInspect the data\n\n\nCode\ndata.sample(5)\n\n\n\n\n\n  \n    \n      \n      PROVNUM\n      PROVNAME\n      CITY\n      STATE\n      COUNTY_NAME\n      COUNTY_FIPS\n      CY_Qtr\n      WorkDate\n      MDScensus\n      Hrs_RNDON\n      ...\n      Hrs_LPN_ctr\n      Hrs_CNA\n      Hrs_CNA_emp\n      Hrs_CNA_ctr\n      Hrs_NAtrn\n      Hrs_NAtrn_emp\n      Hrs_NAtrn_ctr\n      Hrs_MedAide\n      Hrs_MedAide_emp\n      Hrs_MedAide_ctr\n    \n  \n  \n    \n      481867\n      205086\n      PINNACLE HEALTH & REHAB AT N BERWICK\n      NORTH BERWICK\n      ME\n      York\n      31\n      2024Q1\n      20240123\n      58\n      8.00\n      ...\n      0.0\n      159.75\n      159.75\n      0.0\n      0.00\n      0.00\n      0.0\n      0.00\n      0.00\n      0.0\n    \n    \n      333320\n      155263\n      SYCAMORE CARE STRATEGIES\n      LOOGOOTEE\n      IN\n      Martin\n      101\n      2024Q1\n      20240319\n      33\n      8.95\n      ...\n      0.0\n      62.54\n      62.54\n      0.0\n      0.00\n      0.00\n      0.0\n      0.00\n      0.00\n      0.0\n    \n    \n      386166\n      165386\n      COLONIAL MANOR OF ELMA\n      ELMA\n      IA\n      Howard\n      89\n      2024Q1\n      20240223\n      35\n      7.50\n      ...\n      0.0\n      47.25\n      47.25\n      0.0\n      0.00\n      0.00\n      0.0\n      9.25\n      9.25\n      0.0\n    \n    \n      980747\n      395456\n      GARDENS AT WYOMING VALLEY, THE\n      WILKES BARRE\n      PA\n      Luzerne\n      79\n      2024Q1\n      20240210\n      87\n      0.00\n      ...\n      0.0\n      175.00\n      175.00\n      0.0\n      0.00\n      0.00\n      0.0\n      0.00\n      0.00\n      0.0\n    \n    \n      304194\n      145984\n      ALDEN NORTH SHORE REHAB & HCC\n      SKOKIE\n      IL\n      Cook\n      31\n      2024Q1\n      20240313\n      72\n      7.25\n      ...\n      7.5\n      113.25\n      113.25\n      0.0\n      15.25\n      15.25\n      0.0\n      0.00\n      0.00\n      0.0\n    \n  \n\n5 rows × 33 columns\n\n\n\n\n\nCode\ndata.info(memory_usage=False)\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1330966 entries, 0 to 1330965\nData columns (total 33 columns):\n #   Column            Non-Null Count    Dtype  \n---  ------            --------------    -----  \n 0   PROVNUM           1330966 non-null  object \n 1   PROVNAME          1330966 non-null  object \n 2   CITY              1330966 non-null  object \n 3   STATE             1330966 non-null  object \n 4   COUNTY_NAME       1330966 non-null  object \n 5   COUNTY_FIPS       1330966 non-null  int64  \n 6   CY_Qtr            1330966 non-null  object \n 7   WorkDate          1330966 non-null  int64  \n 8   MDScensus         1330966 non-null  int64  \n 9   Hrs_RNDON         1330966 non-null  float64\n 10  Hrs_RNDON_emp     1330966 non-null  float64\n 11  Hrs_RNDON_ctr     1330966 non-null  float64\n 12  Hrs_RNadmin       1330966 non-null  float64\n 13  Hrs_RNadmin_emp   1330966 non-null  float64\n 14  Hrs_RNadmin_ctr   1330966 non-null  float64\n 15  Hrs_RN            1330966 non-null  float64\n 16  Hrs_RN_emp        1330966 non-null  float64\n 17  Hrs_RN_ctr        1330966 non-null  float64\n 18  Hrs_LPNadmin      1330966 non-null  float64\n 19  Hrs_LPNadmin_emp  1330966 non-null  float64\n 20  Hrs_LPNadmin_ctr  1330966 non-null  float64\n 21  Hrs_LPN           1330966 non-null  float64\n 22  Hrs_LPN_emp       1330966 non-null  float64\n 23  Hrs_LPN_ctr       1330966 non-null  float64\n 24  Hrs_CNA           1330966 non-null  float64\n 25  Hrs_CNA_emp       1330966 non-null  float64\n 26  Hrs_CNA_ctr       1330966 non-null  float64\n 27  Hrs_NAtrn         1330966 non-null  float64\n 28  Hrs_NAtrn_emp     1330966 non-null  float64\n 29  Hrs_NAtrn_ctr     1330966 non-null  float64\n 30  Hrs_MedAide       1330966 non-null  float64\n 31  Hrs_MedAide_emp   1330966 non-null  float64\n 32  Hrs_MedAide_ctr   1330966 non-null  float64\ndtypes: float64(24), int64(3), object(6)\n\n\n\n\nCode\ndata.describe().round(1)\n# display(Markdown(data.describe().to_markdown()))\n\n\n\n\n\n  \n    \n      \n      COUNTY_FIPS\n      WorkDate\n      MDScensus\n      Hrs_RNDON\n      Hrs_RNDON_emp\n      Hrs_RNDON_ctr\n      Hrs_RNadmin\n      Hrs_RNadmin_emp\n      Hrs_RNadmin_ctr\n      Hrs_RN\n      ...\n      Hrs_LPN_ctr\n      Hrs_CNA\n      Hrs_CNA_emp\n      Hrs_CNA_ctr\n      Hrs_NAtrn\n      Hrs_NAtrn_emp\n      Hrs_NAtrn_ctr\n      Hrs_MedAide\n      Hrs_MedAide_emp\n      Hrs_MedAide_ctr\n    \n  \n  \n    \n      count\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      ...\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n      1330966.0\n    \n    \n      mean\n      91.1\n      20240215.7\n      83.4\n      5.2\n      5.1\n      0.1\n      10.3\n      10.0\n      0.2\n      34.4\n      ...\n      6.5\n      171.2\n      158.2\n      13.0\n      4.2\n      4.2\n      0.1\n      8.5\n      8.3\n      0.2\n    \n    \n      std\n      99.2\n      83.0\n      49.1\n      4.5\n      4.5\n      0.9\n      14.9\n      14.6\n      1.8\n      34.7\n      ...\n      16.2\n      113.7\n      106.3\n      32.6\n      13.1\n      12.7\n      2.1\n      17.6\n      17.2\n      2.2\n    \n    \n      min\n      1.0\n      20240101.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      25%\n      31.0\n      20240123.0\n      51.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      13.0\n      ...\n      0.0\n      97.0\n      88.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      50%\n      69.0\n      20240215.0\n      76.0\n      8.0\n      8.0\n      0.0\n      7.5\n      7.4\n      0.0\n      25.6\n      ...\n      0.0\n      148.1\n      136.8\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      75%\n      117.0\n      20240309.0\n      104.0\n      8.0\n      8.0\n      0.0\n      16.0\n      16.0\n      0.0\n      44.8\n      ...\n      5.8\n      217.0\n      203.1\n      11.0\n      0.0\n      0.0\n      0.0\n      11.2\n      10.8\n      0.0\n    \n    \n      max\n      840.0\n      20240331.0\n      743.0\n      327.8\n      327.8\n      42.0\n      266.2\n      266.2\n      92.5\n      908.6\n      ...\n      454.0\n      1857.7\n      1573.1\n      694.3\n      452.0\n      279.0\n      280.5\n      395.6\n      395.6\n      128.9\n    \n  \n\n8 rows × 27 columns\n\n\n\n\n\nGroup the features\n\n\nCode\ndf = data.loc[:, [\n    \"STATE\",\n    \"COUNTY_NAME\", \"COUNTY_FIPS\",\n    \"CITY\",\n    \"PROVNAME\", \"PROVNUM\",\n    # \"MDScensus\"\n]].value_counts()\ndf.to_frame()\n# GT(df.reset_index().head(n=5))\n\n\n\n\n\n  \n    \n      \n      \n      \n      \n      \n      \n      count\n    \n    \n      STATE\n      COUNTY_NAME\n      COUNTY_FIPS\n      CITY\n      PROVNAME\n      PROVNUM\n      \n    \n  \n  \n    \n      AK\n      Anchorage\n      20\n      ANCHORAGE\n      PRESTIGE CARE & REHAB CENTER OF ANCHORAGE\n      025025\n      91\n    \n    \n      OH\n      Allen\n      3\n      LIMA\n      LIMA CONVALESCENT HOME\n      366297\n      91\n    \n    \n      SHAWNEE MANOR\n      365361\n      91\n    \n    \n      SPRINGS OF LIMA THE\n      366464\n      91\n    \n    \n      SPRINGVIEW MANOR\n      366221\n      91\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      IN\n      Tippecanoe\n      157\n      WEST LAFAYETTE\n      HERITAGE HEALTHCARE\n      155402\n      91\n    \n    \n      INDIANA VETERANS HOME\n      155787\n      91\n    \n    \n      UNIVERSITY PLACE HEALTH CENTER AND ASSISTED LIVING\n      155725\n      91\n    \n    \n      WESTMINSTER VILLAGE - WEST LAFAYETTE\n      155177\n      91\n    \n    \n      WY\n      Weston\n      45\n      NEWCASTLE\n      WESTON COUNTY HEALTH SERVICES\n      535023\n      91\n    \n  \n\n14626 rows × 1 columns\n\n\n\n\n\nCode\ndisplay2(\n    \"data['STATE'].value_counts()\",\n    \"data['COUNTY_NAME'].value_counts()\",\n    \"data['CITY'].value_counts()\",\n    \"data['PROVNAME'].value_counts()\",\n    \"data['MDScensus'].value_counts()\",\n    width=\"340px\",\n    globs=globals()\n)\n\n\ndata['STATE'].value_counts()\n--- (52,) ---\nSTATE\nTX    105924\nCA    103740\nOH     83538\nFL     63245\nIL     61425\nPA     60515\nNY     54691\nIN     46501\nMO     44226\nMI     38402\nNC     37310\nIA     36036\nGA     31941\nNJ     31395\nMA     31122\nMN     30758\nWI     29484\nTN     27300\nKS     27118\nVA     26117\nOK     25116\nKY     24115\nLA     23751\nAL     20293\nMD     20020\nAR     19747\nCO     19110\nMS     18200\nCT     17836\nWA     17199\nSC     16835\nNE     16289\nAZ     12649\nOR     11557\nWV     11102\nUT      8918\nSD      8554\nME      7371\nID      7280\nND      6734\nRI      6643\nNH      6643\nNM      6006\nNV      5824\nMT      5369\nDE      3913\nHI      3731\nVT      3094\nWY      2912\nDC      1547\nAK      1365\nPR       455\nName: count, dtype: int64data['COUNTY_NAME'].value_counts()\n--- (1671,) ---\nCOUNTY_NAME\nLos Angeles    33124\nCook           18564\nMontgomery     16835\nJefferson      16471\nWashington     12831\n               ...  \nLanier            91\nTwiggs            91\nVinton            91\nBoundary          91\nRefugio           91\nName: count, Length: 1671, dtype: int64data['CITY'].value_counts()\n--- (5092,) ---\nCITY\nCHICAGO          7098\nLOS ANGELES      6916\nCINCINNATI       6279\nHOUSTON          5824\nSAN ANTONIO      5460\n                 ... \nLINCROFT           91\nWYCKOFF            91\nFLORHAM PARK       91\nNEW BRUNSWICK      91\nHORSESHOE BAY      91\nName: count, Length: 5092, dtype: int64data['PROVNAME'].value_counts()\n--- (14441,) ---\nPROVNAME\nMILLER'S MERRY MANOR                                  1092\nPARKVIEW CARE CENTER                                   455\nLITTLE SISTERS OF THE POOR                             455\nHERITAGE MANOR                                         273\nRIVERSIDE NURSING AND REHABILITATION CENTER            273\n                                                      ... \nMORGANFIELD NURSING AND REHABILITATION CENTER           91\nCAMPBELLSVILLE NURSING AND REHABILITATION CENTER        91\nFRANKLIN-SIMPSON NURSING AND REHABILITATION CENTER      91\nGRAND HAVEN NURSING HOME                                91\nTIERRA ESTE NURSING AND REHABILITATION CENTER           91\nName: count, Length: 14441, dtype: int64data['MDScensus'].value_counts()\n--- (635,) ---\nMDScensus\n56     15160\n57     15116\n58     15051\n55     14830\n53     14618\n       ...  \n622        1\n629        1\n730        1\n634        1\n617        1\nName: count, Length: 635, dtype: int64\n\n\n\n\nCode\ndata[[\"CY_Qtr\", \"WorkDate\", \"MDScensus\"]]\n\n\n\n\n\n  \n    \n      \n      CY_Qtr\n      WorkDate\n      MDScensus\n    \n  \n  \n    \n      0\n      2024Q1\n      20240101\n      50\n    \n    \n      1\n      2024Q1\n      20240102\n      49\n    \n    \n      2\n      2024Q1\n      20240103\n      49\n    \n    \n      3\n      2024Q1\n      20240104\n      50\n    \n    \n      4\n      2024Q1\n      20240105\n      51\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      1330961\n      2024Q1\n      20240327\n      81\n    \n    \n      1330962\n      2024Q1\n      20240328\n      83\n    \n    \n      1330963\n      2024Q1\n      20240329\n      85\n    \n    \n      1330964\n      2024Q1\n      20240330\n      82\n    \n    \n      1330965\n      2024Q1\n      20240331\n      82\n    \n  \n\n1330966 rows × 3 columns\n\n\n\n\n\nClean the data"
  },
  {
    "objectID": "notebooks/report.html#explore-the-dataset",
    "href": "notebooks/report.html#explore-the-dataset",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Explore the dataset",
    "text": "Explore the dataset\n\nVisualize distributions\n\n\nVisualize relationships\n\n\nCode\nattributes = [\"Hrs_RN\", \"Hrs_LPN_ctr\", \"Hrs_CNA\", \"Hrs_NAtrn\", \"Hrs_MedAide\"]\nn = len(attributes)\n\nfig, axs = plt.subplots(n, n, figsize=(8, 8))\nscatter_matrix(\n    data[attributes].sample(200),\n    ax=axs, alpha=.7,\n    hist_kwds=dict(bins=15, linewidth=0)\n)\nfig.align_ylabels(axs[:, 0])\nfig.align_xlabels(axs[-1, :])\nfor ax in axs.flatten():\n    ax.tick_params(axis='both', which='both', length=3.5)\n\n# save_fig(\"scatter_matrix_plot\")\n\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Scatter matrix of nursing worker working hours\n\n\n\n\n\n\n\nCompare groups"
  },
  {
    "objectID": "notebooks/report.html#feature-engineer",
    "href": "notebooks/report.html#feature-engineer",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Feature engineer",
    "text": "Feature engineer\n\nJoin geographical data\n\n\nJoin seasonal data"
  },
  {
    "objectID": "notebooks/report.html#analyze-geography",
    "href": "notebooks/report.html#analyze-geography",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Analyze geography",
    "text": "Analyze geography"
  },
  {
    "objectID": "notebooks/report.html#analyze-seasonality",
    "href": "notebooks/report.html#analyze-seasonality",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Analyze seasonality",
    "text": "Analyze seasonality"
  },
  {
    "objectID": "notebooks/report.html#model",
    "href": "notebooks/report.html#model",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Model",
    "text": "Model"
  },
  {
    "objectID": "notebooks/report.html#extra-visualizations",
    "href": "notebooks/report.html#extra-visualizations",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Extra visualizations",
    "text": "Extra visualizations\n\nSparklines\n\n\nCode\n# TODO: pivot on day\n\ndata_pivoted = data.pivot_table(\n    index=\"STATE\",\n    columns=\"WorkDate\",\n    values=\"Hrs_RN\",\n    aggfunc='mean'\n)\n\n# Resetting the index for easier column access\n# data_pivoted.reset_index(inplace=True)\ndata_pivoted.head()\n\n\n\n\n\n  \n    \n      WorkDate\n      20240101\n      20240102\n      20240103\n      20240104\n      20240105\n      20240106\n      20240107\n      20240108\n      20240109\n      20240110\n      ...\n      20240322\n      20240323\n      20240324\n      20240325\n      20240326\n      20240327\n      20240328\n      20240329\n      20240330\n      20240331\n    \n    \n      STATE\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      AK\n      55.602000\n      51.898667\n      51.343333\n      59.512000\n      64.569333\n      58.176000\n      57.300000\n      60.578000\n      58.515333\n      59.689333\n      ...\n      62.525333\n      53.939333\n      57.629333\n      63.704000\n      63.604000\n      63.441333\n      65.700000\n      68.357333\n      54.641333\n      54.074000\n    \n    \n      AL\n      26.901570\n      39.632601\n      40.746816\n      40.160404\n      38.657937\n      26.692466\n      26.345874\n      38.713184\n      40.700897\n      41.691390\n      ...\n      38.314529\n      26.940000\n      26.800493\n      39.800852\n      41.089238\n      40.966502\n      39.004753\n      36.495605\n      27.455964\n      26.797085\n    \n    \n      AR\n      11.224470\n      12.514240\n      13.073456\n      13.465346\n      12.282304\n      12.595714\n      12.768341\n      13.161244\n      13.578756\n      13.734608\n      ...\n      13.382811\n      13.832995\n      13.381382\n      13.655576\n      13.879217\n      13.432074\n      14.206129\n      13.426175\n      13.525300\n      11.958571\n    \n    \n      AZ\n      33.938777\n      36.368273\n      37.029137\n      36.852158\n      36.982302\n      33.031655\n      31.628849\n      38.353525\n      38.457194\n      38.849496\n      ...\n      41.056331\n      34.905971\n      32.476691\n      40.276331\n      39.088633\n      40.678417\n      40.659353\n      39.422662\n      32.910216\n      31.528417\n    \n    \n      CA\n      29.643939\n      32.223912\n      32.686316\n      33.311368\n      32.586842\n      29.678272\n      29.393482\n      32.683263\n      33.510465\n      33.730807\n      ...\n      34.460474\n      31.168947\n      30.193833\n      33.812158\n      34.870868\n      34.675798\n      34.780860\n      33.950561\n      30.720272\n      29.810675\n    \n  \n\n5 rows × 91 columns\n\n\n\n\n\nCode\n# (\n#     GT(data_pivoted, rowname_col=\"STATE\")\n#     .fmt_nanoplot(\n#         columns=data_pivoted.columns[1:],\n#         reference_line=\"mean\",\n#         reference_area=[\"min\", \"q1\"]\n#     )\n#     .fmt_nanoplot(\n#         columns=data_pivoted.columns[1:],\n#         plot_type=\"bar\",\n#         reference_line=\"max\",\n#         reference_area=[\"max\", \"median\"]\n#     )\n# )"
  },
  {
    "objectID": "notebooks/report.html#archive",
    "href": "notebooks/report.html#archive",
    "title": "Nurse staffing strategies for enhanced patient care",
    "section": "Archive",
    "text": "Archive"
  },
  {
    "objectID": "notebooks/sql_qs.html",
    "href": "notebooks/sql_qs.html",
    "title": "Exploring a database with SQL",
    "section": "",
    "text": "Code\nimport sqlite3\nimport pandas as pd\nfrom IPython.display import Markdown, display"
  },
  {
    "objectID": "notebooks/sql_qs.html#imports",
    "href": "notebooks/sql_qs.html#imports",
    "title": "Exploring a database with SQL",
    "section": "",
    "text": "Code\nimport sqlite3\nimport pandas as pd\nfrom IPython.display import Markdown, display"
  },
  {
    "objectID": "notebooks/sql_qs.html#sql",
    "href": "notebooks/sql_qs.html#sql",
    "title": "Exploring a database with SQL",
    "section": "SQL",
    "text": "SQL\nLet us imagine we have the following tables in our database:\n\nSales\n\n\nsales_id (INT)\ncustomer_id (INT)\nproduct_id (INT)\nsale_date (DATE)\nquantity (INT)\ntotal_amount (DECIMAL)\n\n\nCustomers\n\n\ncustomer_id (INT)\ncustomer_name (VARCHAR)\nsales_region (VARCHAR)\nsign_up_date (DATE)\n\n\nProducts\n\n\nproduct_id (INT)\nproduct_name (VARCHAR)\ncategory (VARCHAR)\nprice (DECIMAL)\n\nWe can simulate this problem by creating a test database in Python and adding tables to it that match this description.\n\n\nCreate a database\n# Create a database and cursor to query it\nconn = sqlite3.connect(\"testdatabase.db\", timeout=10.0)\ncursor = conn.cursor()\n\n\n\n\nCreate the tables\n# Create `Sales` table\ncursor.execute(\n    \"\"\"\n    CREATE TABLE IF NOT EXISTS Sales\n    (\n        sales_id INTEGER PRIMARY KEY AUTOINCREMENT,\n        customer_id INTEGER,\n        product_id INTEGER,\n        sales_date DATE,\n        quantity INTEGER,\n        total_amount DECIMAL(10, 2),\n        FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),\n        FOREIGN KEY (product_id) REFERENCES Products(product_id)\n    )\n    \"\"\"\n)\n\n# Create `Customers` table\ncursor.execute(\n    \"\"\"\n    CREATE TABLE IF NOT EXISTS Customers\n    (\n        customer_id INTEGER PRIMARY KEY AUTOINCREMENT,\n        customer_name VARCHAR(255) NOT NULL,\n        sales_region VARCHAR(255),\n        sign_up_date DATE\n    )\n    \"\"\"\n)\n\n# Create `Products` table\ncursor.execute(\n    \"\"\"\n    CREATE TABLE IF NOT EXISTS Products\n    (\n        product_id INTEGER PRIMARY KEY AUTOINCREMENT,\n        product_name VARCHAR(255) NOT NULL,\n        category VARCHAR(255),\n        price DECIMAL(10, 2)\n    )\n    \"\"\"\n)\n\n\n&lt;sqlite3.Cursor at 0x127d3b3c0&gt;\n\n\n\n\nInsert example data\n# Insert record into `Customers` table\nquery = \"\"\"\n    INSERT INTO Customers\n    (customer_name, sales_region, sign_up_date)\n    VALUES (?, ?, ?)\n\"\"\"\nvalues = [\n    (\"John Doe\", \"West\", \"2023-09-25\"),\n    (\"Jane Young\", \"South\", \"2024-09-25\"),\n    (\"Chris Nguyen\", \"West\", \"2024-09-25\"),\n]\ncursor.executemany(query, values)\n\n# Insert record into `Products` table\nquery = \"\"\"\n    INSERT INTO Products\n    (product_name, category, price)\n    VALUES (?, ?, ?)\n\"\"\"\nvalues = [\n    (\"Washing machine\", \"Appliances\", 1500.00),\n    (\"Laptop\", \"Electronics\", 1000.00),\n    (\"Phone\", \"Electronics\", 800.00),\n]\ncursor.executemany(query, values)\n\n# Insert record into `Sales` table\nquery = \"\"\"\n    INSERT INTO Sales\n    (customer_id, product_id, sales_date, quantity, total_amount)\n    VALUES (?, ?, ?, ?, ?)\n\"\"\"\nvalues = [\n    (1, 1, \"2023-09-26\", 2, values[0][2] * 2),\n    (2, 1, \"2023-01-15\", 4, values[0][2] * 4),\n    (2, 2, \"2024-09-20\", 3, values[1][2] * 3),\n    (3, 3, \"2024-09-22\", 9, values[2][2] * 9),\n    (1, 2, \"2023-09-26\", 5, values[1][2] * 5),\n]\ncursor.executemany(query, values)\n\n\n&lt;sqlite3.Cursor at 0x127d3b3c0&gt;\n\n\n\n\nCheck the contents of the tables\n# Query `Sales`\nquery = \"\"\"\n    SELECT *\n    FROM Sales\n    LIMIT 5;\n\"\"\"\ndisplay(Markdown(\"**`Sales`**:\"), pd.read_sql(query, conn))\n\n# Query `Customers`\nquery = \"\"\"\n    SELECT *\n    FROM Customers\n    LIMIT 5;\n\"\"\"\ndisplay(Markdown(\"**`Customers`**:\"), pd.read_sql(query, conn))\n\n# Query `Products`\nquery = \"\"\"\n    SELECT *\n    FROM Products\n    LIMIT 5;\n\"\"\"\ndisplay(Markdown(\"**`Products`**:\"), pd.read_sql(query, conn))\n\n\nSales:\n\n\n\n\n\n  \n    \n      \n      sales_id\n      customer_id\n      product_id\n      sales_date\n      quantity\n      total_amount\n    \n  \n  \n    \n      0\n      1\n      1\n      1\n      2023-09-26\n      2\n      3000\n    \n    \n      1\n      2\n      2\n      1\n      2023-01-15\n      4\n      6000\n    \n    \n      2\n      3\n      2\n      2\n      2024-09-20\n      3\n      3000\n    \n    \n      3\n      4\n      3\n      3\n      2024-09-22\n      9\n      7200\n    \n    \n      4\n      5\n      1\n      2\n      2023-09-26\n      5\n      5000\n    \n  \n\n\n\n\nCustomers:\n\n\n\n\n\n  \n    \n      \n      customer_id\n      customer_name\n      sales_region\n      sign_up_date\n    \n  \n  \n    \n      0\n      1\n      John Doe\n      West\n      2023-09-25\n    \n    \n      1\n      2\n      Jane Young\n      South\n      2024-09-25\n    \n    \n      2\n      3\n      Chris Nguyen\n      West\n      2024-09-25\n    \n  \n\n\n\n\nProducts:\n\n\n\n\n\n  \n    \n      \n      product_id\n      product_name\n      category\n      price\n    \n  \n  \n    \n      0\n      1\n      Washing machine\n      Appliances\n      1500\n    \n    \n      1\n      2\n      Laptop\n      Electronics\n      1000\n    \n    \n      2\n      3\n      Phone\n      Electronics\n      800\n    \n  \n\n\n\n\n\nQ1\nWrite a query to return the customer_name, product_name, and total_amount for each sale in the last 30 days.\n\n\nCode\nquery = \"\"\"\n    SELECT\n        Customers.customer_name,\n        Products.product_name,\n        Sales.total_amount\n    FROM\n        Sales\n    LEFT JOIN Customers\n        ON Sales.customer_id = Customers.customer_id\n    LEFT JOIN Products\n        ON Sales.product_id = Products.product_id\n    WHERE\n        Sales.sales_date &gt;= DATE('now', '-30 days');\n\"\"\"\npd.read_sql(query, conn)\n\n\n\n\n\n  \n    \n      \n      customer_name\n      product_name\n      total_amount\n    \n  \n  \n    \n      0\n      Jane Young\n      Laptop\n      3000\n    \n    \n      1\n      Chris Nguyen\n      Phone\n      7200\n    \n  \n\n\n\n\n\n\nQ2\nWrite a query to find the total revenue generated by each product category in the last year. The output should include the product category and the total revenue for that category.\n\n\nCode\nquery = \"\"\"\n    SELECT\n        Products.category,\n        SUM(Sales.total_amount) AS total_revenue\n    FROM\n        Sales\n    LEFT JOIN Products\n        ON Sales.product_id = Products.product_id\n    WHERE\n        Sales.sales_date &gt;= DATE('now', '-1 year')\n    GROUP BY\n        category;\n\"\"\"\npd.read_sql(query, conn)\n\n\n\n\n\n  \n    \n      \n      category\n      total_revenue\n    \n  \n  \n    \n      0\n      Electronics\n      10200\n    \n  \n\n\n\n\n\n\nQ3\nWrite a query to return all customers who made purchases in 2023 and are located in the “West” region.\n\n\nCode\nquery = \"\"\"\n    SELECT DISTINCT\n        Customers.customer_name\n    FROM\n        Customers\n    INNER JOIN Sales\n        ON Customers.customer_id = Sales.customer_id\n    WHERE\n        strftime('%Y', Sales.sales_date) = '2023'\n        AND Customers.sales_region = 'West'\n\"\"\"\npd.read_sql(query, conn)\n\n\n\n\n\n  \n    \n      \n      customer_name\n    \n  \n  \n    \n      0\n      John Doe\n    \n  \n\n\n\n\n\n\nQ4\nWrite a query to display the total number of sales, total quantity sold, and total revenue for each customer. The result should include the customer_name, total sales, total quantity, and total revenue.\n\n\nCode\nquery = \"\"\"\n    SELECT\n        Customers.customer_name,\n        COUNT(Sales.sales_id) AS total_sales,\n        SUM(Sales.quantity) AS total_quantity,\n        SUM(Sales.total_amount) AS total_revenue\n    FROM\n        Customers\n    LEFT JOIN Sales\n        ON Sales.customer_id = Customers.customer_id\n    GROUP BY\n        Customers.customer_id;\n\"\"\"\npd.read_sql(query, conn)\n\n\n\n\n\n  \n    \n      \n      customer_name\n      total_sales\n      total_quantity\n      total_revenue\n    \n  \n  \n    \n      0\n      John Doe\n      2\n      7\n      8000\n    \n    \n      1\n      Jane Young\n      2\n      7\n      9000\n    \n    \n      2\n      Chris Nguyen\n      1\n      9\n      7200\n    \n  \n\n\n\n\n\n\nQ5\nWrite a query to find the top 3 customers (by total revenue) in the year 2023.\n\n\nCode\nquery = \"\"\"\n    SELECT\n        Customers.customer_name,\n        SUM(Sales.total_amount) AS total_revenue\n    FROM\n        Customers\n    LEFT JOIN Sales\n        ON Customers.customer_id = Sales.customer_id\n        AND strftime('%Y', Sales.sales_date) = '2023'\n    GROUP BY\n        Customers.customer_name\n    ORDER BY\n        total_revenue DESC;\n\"\"\"\npd.read_sql(query, conn)\n\n\n\n\n\n  \n    \n      \n      customer_name\n      total_revenue\n    \n  \n  \n    \n      0\n      John Doe\n      8000.0\n    \n    \n      1\n      Jane Young\n      6000.0\n    \n    \n      2\n      Chris Nguyen\n      NaN\n    \n  \n\n\n\n\n\n\nQ6\nWrite a query to rank products by their total sales quantity in 2023. The result should include the product_name, total quantity sold, and rank.\n\n\nCode\nquery = \"\"\"\n    SELECT\n        Products.product_name,\n        SUM(Sales.quantity) AS total_quantity,\n        RANK() OVER\n            (ORDER BY SUM(Sales.quantity) DESC) AS quantity_rank\n    FROM\n        Products\n    LEFT JOIN Sales\n        ON Products.product_id = Sales.product_id\n        AND strftime('%Y', Sales.sales_date) = '2023'\n    GROUP BY\n        Products.product_name;\n\"\"\"\npd.read_sql(query, conn)\n\n\n\n\n\n  \n    \n      \n      product_name\n      total_quantity\n      quantity_rank\n    \n  \n  \n    \n      0\n      Washing machine\n      6.0\n      1\n    \n    \n      1\n      Laptop\n      5.0\n      2\n    \n    \n      2\n      Phone\n      NaN\n      3\n    \n  \n\n\n\n\n\n\nQ7\nWrite a query that categorizes customers into “New” (if they signed up in the last 6 months) or “Existing” based on their sign_up_date. Include the customer_name, region, and category in the result.\n\n\nCode\nquery = \"\"\"\n    SELECT DISTINCT\n        Customers.customer_name,\n        Customers.sales_region,\n    CASE\n        WHEN\n            Customers.sign_up_date &gt;= DATE('now', '-6 months')\n        THEN\n            'New'\n        ELSE\n            'Existing'\n    END AS customer_status\n    FROM\n        Customers\n    LEFT JOIN Sales\n        ON Customers.customer_id = Sales.customer_id\n\"\"\"\npd.read_sql(query, conn)\n\n\n\n\n\n  \n    \n      \n      customer_name\n      sales_region\n      customer_status\n    \n  \n  \n    \n      0\n      John Doe\n      West\n      Existing\n    \n    \n      1\n      Jane Young\n      South\n      New\n    \n    \n      2\n      Chris Nguyen\n      West\n      New\n    \n  \n\n\n\n\n\n\nQ8\nWrite a query to return the month and year along with the total sales for each month for the last 12 months.\n\n\nCode"
  },
  {
    "objectID": "notebooks/sql_qs.html#wrapping-up",
    "href": "notebooks/sql_qs.html#wrapping-up",
    "title": "Exploring a database with SQL",
    "section": "Wrapping up",
    "text": "Wrapping up\n\n\nClose the database connection\ncursor.close()\nconn.close()"
  }
]